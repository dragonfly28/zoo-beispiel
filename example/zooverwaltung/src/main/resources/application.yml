# GLOBAL CONFIGURATION
spring:
    # if you want to set a different profile
    # use environment variable:
    #
    # SPRING_PROFILES_ACTIVE=docker
     # DB: enable web console
    profiles.active: local
    application.name: Zooverwaltung

eureka:
    instance:
        # send ip addresses to the discovery. this is
        # important for client side load balancing
        preferIpAddress: true
        # push heartbeat every 10 seconds to the registry
        leaseRenewalIntervalInSeconds: 10
        # configure port
        instance-id: Zooverwaltung

---
# DOCKER CONFIGURATION
spring:
    profiles: docker

# inside a container, we can always map to 8080. Use your compose
# file to expose a service on a different port.
server.port: 8080

# the hostname of your eureka server should be 'discovery'
eureka.client.serviceUrl.defaultZone: http://discovery:8761/eureka/

---
# LOCAL CONFIGURATION
spring:
    profiles: local
    
    datasource:
      url: jdbc:h2:mem:zooverwaltung;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      platform: h2
      username: sa
      password:
      driverClassName: org.h2.Driver
    jpa:
      database-platform: org.hibernate.dialect.H2Dialect
      hibernate:
        ddl-auto: update
      properties:
        hibernate:
          show_sql: true
          use_sql_comments: true
          format_sql: true

###
#   H2 Settings
###
    h2:
      console:
        enabled: true
        path: /h2-console
        settings:
          trace: false
          web-allow-others: false


# random server port to avoid port 
# conflicts on localhost
# server.port: 0
# dedicated server port
server.port: 35199    

eureka:
    client:
        # in local mode you have to run your service 
        # discovery on localhost (you also can run the 
        # cloud infrastructure on your local docker host)
        serviceUrl.defaultZone: http://localhost:8761/eureka/
        # fetch all 5 seconds the delta from the service registry
        registry-fetch-interval-seconds: 10